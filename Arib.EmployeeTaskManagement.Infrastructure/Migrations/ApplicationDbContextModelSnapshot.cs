// <auto-generated />
using System;
using Arib.EmployeeTaskManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arib.EmployeeTaskManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.EmployeeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Task_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Department", b =>
                {
                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreateBy");

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeleteBy");

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeleteBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdateBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.EmployeeTask", b =>
                {
                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreateBy");

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeleteBy");

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.Task_Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreatedUser");

                    b.Navigation("DeletedUser");

                    b.Navigation("Employee");

                    b.Navigation("Status");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.User", b =>
                {
                    b.HasOne("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("Arib.EmployeeTaskManagement.Infrastructure.Models.User", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Arib.EmployeeTaskManagement.Infrastructure.Models.Employee", b =>
                {
                    b.Navigation("Subordinates");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
